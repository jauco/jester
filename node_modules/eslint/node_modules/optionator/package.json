{
  "name": "optionator",
  "version": "0.1.1",
  "author": {
    "name": "George Zahariev",
    "email": "z@georgezahariev.com"
  },
  "description": "option parsing",
  "homepage": "",
  "keywords": [
    "options"
  ],
  "files": [
    "lib",
    "README.md",
    "LICENSE"
  ],
  "main": "./lib/",
  "bugs": {
    "url": "https://github.com/gkz/optionator/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/gkz/optionator/master/LICENSE"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/gkz/optionator.git"
  },
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "prelude-ls": "~1.0.3",
    "deep-is": "~0.1.2",
    "wordwrap": "~0.0.2",
    "type-check": "~0.3.0",
    "levn": "~0.2.1",
    "levenshtein-damerau": "~0.1.0"
  },
  "devDependencies": {
    "LiveScript": "~1.2.0",
    "mocha": "~1.8.2",
    "istanbul": "~0.1.43"
  },
  "readme": "# optionator\n<a name=\"optionator\" />\n\nOptionator is an option parsing and help generation library. It uses [type-check](https://github.com/gkz/type-check) and [levn](https://github.com/gkz/levn) behind the scenes to cast and verify input according the specified types. It can accept an array of arguments (like from `process.argv`), a string, or an object.\n\nUnlike other libraries, optionator prefers to fail with helpful error messages rather than silently accept poor input.\n\n    $ cmd --halp\n    Invalid option '--halp' - perhaps you meant '--help'?\n\n    $ cmd --count str\n    Invalid value for option 'count' - expected type Int, received value: str.\n\nMIT license. Version 0.1.1.\n\n    npm install optionator\n\nFor updates on optionator, [follow me on twitter](https://twitter.com/gkzahariev).\n\n## Usage\n`require('optionator');` returns a function. It has one property, `VERSION`, the current version of the library as a string. This function is called with an object specifying your options and other information, see the [settings format section](#settings-format). This in turn returns an object with three properties, `parse`, `generateHelp`, and `generateHelpForOption`, which are all functions.\n\n```js\nvar optionator = require('optionator')({\n  prepend: 'Usage: cmd [options]',\n  append: 'Version 1.0.0',\n  options: [{\n    option: 'help',\n    alias: 'h',\n    type: 'Boolean',\n    description: 'displays help'\n  }, {\n    option: 'count',\n    alias: 'c',\n    type: 'Int',\n    description: 'number of things',\n    example: 'cmd --count 2'\n  }]\n});\n```\n\n### parse(input, options)\n`parse` processes the `input` according to your settings, and returns an object with the results.\n\n##### arguments\n* input - `[String] | Object | String` - the input you wish to parse\n* options - `{slice: Int}` - the only current option is `slice`, which specifies how much to slice away from the beginning if the input is an array or string - by default `0` for string, `2` for array (works with `process.argv`)\n\n##### returns\n`Object` - the parsed options, each key is a camelCase version of the option name (specified in dash-case), and each value is the processed value for that option. Positional values are in an array under the `_` key.\n\n##### example\n```js\nparse(['node', 't.js', '--count', '2', 'positional']); // {count: 2, _: ['positional']}\nparse('--count 2 positional');                         // {count: 2, _: ['positional']}\nparse({count: 2, _:['positional']});                   // {count: 2, _: ['positional']}\n```\n\n### generateHelp(helpOptions)\n`generateHelp` produces help text based on your settings.\n\n##### arguments\n* options - `{showHidden: Boolean}` - the only current option is `showHidden`, which specifies whether to show options with `hidden: true` specified, by default it is `false`\n\n##### returns\n`String` - the generated help text\n\n##### example\n```js\ngenerateHelp(); /*\n\"Usage: cmd [options] positional\n\n  -h, --help       displays help\n  -c, --count Int  number of things\n\nVersion  1.0.0\n\"*/\n```\n\n### generateHelpForOption(optionName)\n`generateHelpForOption` produces expanded help text for the specified with `optionName` option. If an `example` was specified for the option, it will be displayed,  and if a `longDescription` was specified, it will display that instead of the `description`.\n\n##### arguments\n* optionName - `String` - the name of the option to display\n\n##### returns\n`String` - the generated help text for the option\n\n##### example\n```js\ngenerateHelpForOption('count'); /*\n\"-c, --count Int\ndescription: number of things\nexample: cmd --count 2\n\"*/\n```\n\n## Settings Format\nWhen your `require('optionator')`, you get a function that takes in a settings object. This object has the type:\n\n    {\n      prepend: Maybe String,\n      append: Maybe String,\n      options: [{heading: String} | {\n        option: String,\n        alias: Maybe [String] | String,\n        type: Maybe String,\n        enum: Maybe [String],\n        default: Maybe String,\n        restPositional: Maybe Boolean,\n        requried: Maybe Boolean,\n        description: Maybe String,\n        longDescription: Maybe String,\n        example: Maybe [String] | String\n      }],\n      helpStyle: Maybe {\n        aliasSeparator: Maybe String,\n        typeSeparator: Maybe String,\n        descriptionSeparator: Maybe String,\n        initialIndent: Maybe Int,\n        secondaryIndent: Maybe Int,\n        maxPadFactor: Maybe Number\n      },\n      mutuallyExclusive: Maybe [[String | [String]]],\n    }\n\n### Top Level Properties\n* `prepend` is an optional string to be placed before the options in the help text\n* `append` is an optional string to be placed after the options in the help text\n* `options` is a required array specifying your options and headings, the options and headings will be displayed in the order specified\n* `helpStyle` is an optional object which enables you to change the default appearance of some aspects of the help text\n* `mutuallyExclusive` is an optional array of arrays of either strings or arrays of strings. The top level array is a list of rules, each rule is a list of elements - each element can be either a string (the name of an option), or a list of strings (a group of option names) - there will be an error if more than one element is present\n\n#### Heading Properties\n* `heading` a required string, the name of the heading\n\n#### Option Properties\n* `option` the required name of the option - use dash-case, without the leading dashes\n* `alias` is an optional string or array of strings which specify any aliases for the option\n* `type` is a required string in the [type check](https://github.com/gkz/type-check) [format](https://github.com/gkz/type-check#type-format), this will be used to cast the inputted value and validate it\n* `enum` is an optional array of strings, each string will be parsed by [levn](https://github.com/gkz/levn) - the argument value must be one of the resulting values - each potential value must validate against the specified `type`\n* `default` is a optional string, which will be parsed by [levn](https://github.com/gkz/levn) and used as the default value if none is set - the value must validate against the specified `type`\n* `restPositional` is an optional boolean - if set to `true`, everything after the option will be taken to be a positional argument, even if it looks like a named argument\n* `required` is an optional boolean - if set to `true`, the option parsing will fail if the option is not defined\n* `description` is an optional string, which will be displayed next to the option in the help text\n* `longDescription` is an optional string, it will be displayed instead of the `description` when `generateHelpForOption` is used\n* `example` is an optional string or array of strings with example(s) for the option - these will be displayed when `generateHelpForOption` is used\n\n#### Help Style Properties\n* `aliasSeparator` is an optional string, separates multiple names from each other - default: ' ,'\n* `typeSeparator` is an optional string, separates the type from the names - default: ' '\n* `descriptionSeparator` is an optional string , separates the description from the padded name and type - default: '  '\n* `initialIndent` is an optional int - the amount of indent for options - default: 2\n* `secondaryIndent` is an optional int - the amount of indent if wrapped fully (in addition to the initial indent) - default: 4\n* `maxPadFactor` is an optional number - affects the default level of padding for the names/type, it is multiplied by the average of the length of the names/type - default: 1.5\n\n## Argument Format\nAt the highest level there are two types of arguments: named, and positional.\n\nName arguments of any length are prefixed with `--` (eg. `--go`), and those of one character may be prefixed with either `--` or `-` (eg. `-g`).\n\nThere are two types of named arguments: boolean flags (eg. `--problemo`, `-p`) which take no value and result in a `true` if they are present, the falsey `undefined` if they are not present, or `false` if present and explicitly prefixed with `no` (eg. `--no-problemo`). Named arguments with values (eg. `--tseries 800`, `-t 800`) are the other type. If the option has a type `Boolean` it will automatically be made into a boolean flag. Any other type results in a named argument that takes a value.\n\nFor more information about how to properly set types to get the value you want, take a look at the [type check](https://github.com/gkz/type-check) and [levn](https://github.com/gkz/levn) pages.\n\nYou can group single character arguments that use a single `-`, however all except the last must be boolean flags (which take no value). The last may be a boolean flag, or an argument which takes a value - eg. `-ba 2` is equivalent to `-b -a 2`.\n\nPositional arguments are all those values which do not fall under the above - they can be anywhere, not just at the end. For example, in `cmd -b one -a 2 two` where `b` is a boolean flag, and `a` has the type `Number`, there are two positional arguments, `one` and `two`.\n\nEverything after an `--` is positional, even if it looks like a named argument.\n\nYou may optionally use `=` to separate option names from values, for example: `--count=2`.\n\nIf you specify the option `NUM`, then any argument using a single `-` followed by a number will be valid and will set the value of `NUM`. Eg. `-2` will be parsed into `NUM: 2`.\n\nIf duplicate named arguments are present, the last one will be taken.\n\n## Technical About\n\n`optionator` is written in [LiveScript](http://livescript.net/) - a language that compiles to JavaScript. It uses [levn](https://github.com/gkz/levn) to cast arguments to their specified type, and uses [type-check](https://github.com/gkz/type-check) to validate values. It also uses the [prelude.ls](http://preludels.com/) library.\n",
  "readmeFilename": "README.md",
  "_id": "optionator@0.1.1",
  "_from": "optionator@0.1.1"
}
